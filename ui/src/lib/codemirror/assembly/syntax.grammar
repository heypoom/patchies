@precedence {
  LabelDefinition,
  StringDefinition @left,
  ValueDefinition @left,
  LabelDefinition @left,
  InstructionExpression @left,
  Instruction @left,
  Value @right,
  Identifier @right
}

@top Program {
  (StringDefinition | ValueDefinition | InstructionExpression | LabelDefinition)*
}

@skip { space | Comment }

StringDefinition {
  ".string" Identifier String eol
}

ValueDefinition {
  ".value" Identifier Value eol
}

InstructionExpression {
  Instruction (Identifier | Value)+ eol
}

LabelDefinition {
  label eol
}

Instruction { instruction }
Comment { comment }
Identifier { identifier }

String {
  string
}

Value {
  hex_number | bin_number | number
}

@tokens {
  instruction { "noop" | "push" | "pop" | "load_string" | "load" | "store" | "write" | "read" | "dup" | "swap" | "over" | "rotate" | "nip" | "tuck" | "pick" | "inc" | "dec" | "add" | "sub" | "mul" | "div" | "mod" | "jump" | "jump_zero" | "jump_not_zero" | "equal" | "not_equal" | "less_than" | "less_than_or_equal" | "greater_than" | "greater_than_or_equal" | "print" | "call" | "return" | "send" | "receive" | "memory_map" | "and" | "or" | "xor" | "not" | "left_shift" | "right_shift" | "sleep_tick" | "sleep_ms" | "halt" | "eof" }

  eol { $[\n\r] }
  space { "\s" }
  identifier { $[0-9a-zA-Z_]+ }
  comment { ";" ![\n\r]* }
  label { identifier ":" }

  number { '-'? int frac? exp?  }
  int  { '0' | $[1-9] @digit* }
  frac { '.' @digit+ }
  exp  { $[eE] $[+\-]? @digit+ }

  string { '"' char* '"' }
  char { $[\u{20}\u{21}\u{23}-\u{5b}\u{5d}-\u{10ffff}] | "\\" esc }
  esc  { $["\\\/bfnrt] | "u" hex hex hex hex }
  hex  { $[0-9a-fA-F] }

  hex_number { "0x" hex+ }
  bin_number { "0b" hex+ }

  @precedence { bin_number, hex_number, number, label, instruction, identifier, space }
}

